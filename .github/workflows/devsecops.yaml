name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ---------------------------------------
  # 1) Dependency Scanning (SCA)
  # ---------------------------------------
  dependency-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      # Example using npm audit
      - name: Audit dependencies
        run: npm audit --audit-level=critical
        # The above only fails if vulnerabilities >= 'critical' are found.
        # Adjust 'audit-level' as needed (low, moderate, high, critical).
        # For a more robust solution, consider Snyk or other tools.

  # ---------------------------------------
  # 2) Static Analysis (SAST)
  # ---------------------------------------
  static-analysis:
    runs-on: ubuntu-latest
    needs: dependency-scanning  # SAST only runs if dependency check passes
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      # Example using Semgrep for SAST
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          # 'semgrep_app_token' is stored in GitHub Secrets
          # if you want to report results to Semgrep Cloud. Otherwise you can omit it.
          # semgrep_app_token: ${{ secrets.SEMGREP_APP_TOKEN }}
          # Example: scanning the entire codebase
          config: 'p/ci'

      # If you prefer GitHub CodeQL (an alternative SAST), you can set it up as well.

  # ---------------------------------------
  # 3) Build & Test
  # ---------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    needs: static-analysis  # Only run if SAST passes
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

  # ---------------------------------------
  # 4) Container Build & Scan (Optional)
  # ---------------------------------------
  docker-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry (Optional)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t my-react-app:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.9.2
        with:
          image-ref: 'my-react-app:latest'
          exit-code: '1'
          format: 'table'
        # exit-code: '1' means the job will fail if Trivy finds vulnerabilities.

  # ---------------------------------------
  # 5) Deploy (Example: GitHub Pages)
  # ---------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [ build-and-test, docker-scan ]  # or whichever jobs are relevant
    if: github.ref == 'refs/heads/main'      # Only deploy on main push
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Deploy to GitHub Pages
        run: npm run deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
